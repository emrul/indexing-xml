CREATE TYPE numrange AS RANGE (
  SUBTYPE = NUMERIC,
  SUBTYPE_CMP = numeric_cmp
);
CREATE TABLE numrange_test (nr NUMRANGE);
-- negative test; should fail
INSERT INTO numrange_test VALUES('-[1.1, 2.2)');
ERROR:  syntax error on range input, character 1
LINE 1: INSERT INTO numrange_test VALUES('-[1.1, 2.2)');
                                         ^
INSERT INTO numrange_test VALUES('[1.1, NULL)');
ERROR:  NULL range boundaries are not supported
LINE 1: INSERT INTO numrange_test VALUES('[1.1, NULL)');
                                         ^
INSERT INTO numrange_test VALUES('[NULL, 2.2)');
ERROR:  NULL range boundaries are not supported
LINE 1: INSERT INTO numrange_test VALUES('[NULL, 2.2)');
                                         ^
INSERT INTO numrange_test VALUES('[NULL, NULL)');
ERROR:  NULL range boundaries are not supported
LINE 1: INSERT INTO numrange_test VALUES('[NULL, NULL)');
                                         ^
-- should succeed
INSERT INTO numrange_test VALUES('[-INF, INF)');
INSERT INTO numrange_test VALUES('[3, INF]');
INSERT INTO numrange_test VALUES('[-INF, 5)');
INSERT INTO numrange_test VALUES(range(1.1, 2.2));
INSERT INTO numrange_test VALUES('-');
INSERT INTO numrange_test VALUES(range(1.7));
SELECT empty(nr) FROM numrange_test;
 empty 
-------
 f
 f
 f
 f
 t
 f
(6 rows)

SELECT lower_inc(nr), lower(nr), upper(nr), upper_inc(nr) FROM numrange_test
  WHERE NOT empty(nr) AND NOT lower_inf(nr) AND NOT upper_inf(nr);
 lower_inc | lower | upper | upper_inc 
-----------+-------+-------+-----------
 t         |   1.1 |   2.2 | f
 t         |   1.7 |   1.7 | t
(2 rows)

SELECT * FROM numrange_test WHERE contains(nr, range(1.9,1.91));
      nr       
---------------
 ( -INF, INF )
 ( -INF, 5 )
 [ 1.1, 2.2 )
(3 rows)

SELECT * FROM numrange_test WHERE nr @> range(1.0,10000.1);
      nr       
---------------
 ( -INF, INF )
(1 row)

SELECT * FROM numrange_test WHERE contained_by(range(-1e7,-10000.1), nr);
 nr 
----
 -
(1 row)

SELECT * FROM numrange_test WHERE 1.9 <@ nr;
      nr       
---------------
 ( -INF, INF )
 ( -INF, 5 )
 [ 1.1, 2.2 )
(3 rows)

SELECT * FROM numrange_test WHERE nr = '-';
 nr 
----
 -
(1 row)

SELECT * FROM numrange_test WHERE range_eq(nr, '(1.1, 2.2)');
 nr 
----
(0 rows)

SELECT * FROM numrange_test WHERE nr = '[1.1, 2.2)';
      nr      
--------------
 [ 1.1, 2.2 )
(1 row)

select range(2.0, 1.0);
ERROR:  range lower bound must be less than or equal to range upper bound
select range(2.0, 3.0) -|- range(3.0, 4.0);
 ?column? 
----------
 t
(1 row)

select adjacent(range(2.0, 3.0), range(3.1, 4.0));
 adjacent 
----------
 f
(1 row)

select rangeii(2.0, 3.0) -|- range__(3.0, 4.0);
 ?column? 
----------
 t
(1 row)

select range(1.0, 2.0) -|- rangeii(2.0, 3.0);
 ?column? 
----------
 t
(1 row)

select adjacent(range_i(2.0, 3.0), range_i(1.0, 2.0));
 adjacent 
----------
 t
(1 row)

select range(1.1, 2.2) - range(2.0, 3.0);
   ?column?   
--------------
 [ 1.1, 2.0 )
(1 row)

select range(1.1, 2.2) - range(2.2, 3.0);
   ?column?   
--------------
 [ 1.1, 2.2 )
(1 row)

select rangeii(1.1, 2.2) - range(2.0, 3.0);
   ?column?   
--------------
 [ 1.1, 2.0 )
(1 row)

select minus(rangeii(10.1, 12.2), range_i(110.0,120.2));
     minus      
----------------
 [ 10.1, 12.2 ]
(1 row)

select minus(rangeii(10.1, 12.2), range_i(0.0,120.2));
 minus 
-------
 -
(1 row)

select rangeii(4.5, 5.5) && range(5.5, 6.5);
 ?column? 
----------
 t
(1 row)

select range(1.0, 2.0) << range(3.0, 4.0);
 ?column? 
----------
 t
(1 row)

select range(1.0, 2.0) >> range(3.0, 4.0);
 ?column? 
----------
 f
(1 row)

select range(3.0, 70.0) &< range(6.6, 100.0);
 ?column? 
----------
 t
(1 row)

select range(1.1, 2.2) < range(1.0, 200.2);
 ?column? 
----------
 f
(1 row)

select range(1.1, 2.2) < range__(1.1, 1.2);
 ?column? 
----------
 t
(1 row)

select range(1.0, 2.0) + range(2.0, 3.0);
   ?column?   
--------------
 [ 1.0, 3.0 )
(1 row)

select range(1.0, 2.0) + range(1.5, 3.0);
   ?column?   
--------------
 [ 1.0, 3.0 )
(1 row)

select range(1.0, 2.0) + range(2.5, 3.0);
ERROR:  range union resulted in two ranges
select range(1.0, 2.0) * range(2.0, 3.0);
 ?column? 
----------
 -
(1 row)

select range(1.0, 2.0) * range(1.5, 3.0);
   ?column?   
--------------
 [ 1.5, 2.0 )
(1 row)

select range(1.0, 2.0) * range(2.5, 3.0);
 ?column? 
----------
 -
(1 row)

DROP TABLE numrange_test;
