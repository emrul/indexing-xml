CREATE TABLE numrange_test (nr NUMRANGE);
create index numrange_test_btree on numrange_test(nr);
SET enable_seqscan = f;
-- negative test; should fail
INSERT INTO numrange_test VALUES('-[1.1, 2.2)');
ERROR:  syntax error on range input, character 1
LINE 1: INSERT INTO numrange_test VALUES('-[1.1, 2.2)');
                                         ^
INSERT INTO numrange_test VALUES('[1.1, NULL)');
ERROR:  NULL range boundaries are not supported
LINE 1: INSERT INTO numrange_test VALUES('[1.1, NULL)');
                                         ^
INSERT INTO numrange_test VALUES('[NULL, 2.2)');
ERROR:  NULL range boundaries are not supported
LINE 1: INSERT INTO numrange_test VALUES('[NULL, 2.2)');
                                         ^
INSERT INTO numrange_test VALUES('[NULL, NULL)');
ERROR:  NULL range boundaries are not supported
LINE 1: INSERT INTO numrange_test VALUES('[NULL, NULL)');
                                         ^
-- should succeed
INSERT INTO numrange_test VALUES('[-INF, INF)');
INSERT INTO numrange_test VALUES('[3, INF]');
INSERT INTO numrange_test VALUES('[-INF, 5)');
INSERT INTO numrange_test VALUES(range(1.1, 2.2));
INSERT INTO numrange_test VALUES('-');
INSERT INTO numrange_test VALUES(range(1.7));
SELECT empty(nr) FROM numrange_test;
 empty 
-------
 f
 f
 f
 f
 t
 f
(6 rows)

SELECT lower_inc(nr), lower(nr), upper(nr), upper_inc(nr) FROM numrange_test
  WHERE NOT empty(nr) AND NOT lower_inf(nr) AND NOT upper_inf(nr);
 lower_inc | lower | upper | upper_inc 
-----------+-------+-------+-----------
 t         |   1.1 |   2.2 | f
 t         |   1.7 |   1.7 | t
(2 rows)

SELECT * FROM numrange_test WHERE contains(nr, range(1.9,1.91));
      nr       
---------------
 ( -INF, INF )
 ( -INF, 5 )
 [ 1.1, 2.2 )
(3 rows)

SELECT * FROM numrange_test WHERE nr @> range(1.0,10000.1);
      nr       
---------------
 ( -INF, INF )
(1 row)

SELECT * FROM numrange_test WHERE contained_by(range(-1e7,-10000.1), nr);
      nr       
---------------
 ( -INF, INF )
 ( -INF, 5 )
(2 rows)

SELECT * FROM numrange_test WHERE 1.9 <@ nr;
      nr       
---------------
 ( -INF, INF )
 ( -INF, 5 )
 [ 1.1, 2.2 )
(3 rows)

SELECT * FROM numrange_test WHERE nr = '-';
 nr 
----
 -
(1 row)

SELECT * FROM numrange_test WHERE range_eq(nr, '(1.1, 2.2)');
 nr 
----
(0 rows)

SELECT * FROM numrange_test WHERE nr = '[1.1, 2.2)';
      nr      
--------------
 [ 1.1, 2.2 )
(1 row)

select range(2.0, 1.0);
ERROR:  range lower bound must be less than or equal to range upper bound
select range(2.0, 3.0) -|- range(3.0, 4.0);
 ?column? 
----------
 t
(1 row)

select adjacent(range(2.0, 3.0), range(3.1, 4.0));
 adjacent 
----------
 f
(1 row)

select rangeii(2.0, 3.0) -|- range__(3.0, 4.0);
 ?column? 
----------
 t
(1 row)

select range(1.0, 2.0) -|- rangeii(2.0, 3.0);
 ?column? 
----------
 t
(1 row)

select adjacent(range_i(2.0, 3.0), range_i(1.0, 2.0));
 adjacent 
----------
 t
(1 row)

select range(1.1, 3.3) <@ range(0.1,10.1);
 ?column? 
----------
 t
(1 row)

select range(0.1, 10.1) <@ range(1.1,3.3);
 ?column? 
----------
 f
(1 row)

select range(1.1, 2.2) - range(2.0, 3.0);
   ?column?   
--------------
 [ 1.1, 2.0 )
(1 row)

select range(1.1, 2.2) - range(2.2, 3.0);
   ?column?   
--------------
 [ 1.1, 2.2 )
(1 row)

select rangeii(1.1, 2.2) - range(2.0, 3.0);
   ?column?   
--------------
 [ 1.1, 2.0 )
(1 row)

select minus(rangeii(10.1, 12.2), range_i(110.0,120.2));
     minus      
----------------
 [ 10.1, 12.2 ]
(1 row)

select minus(rangeii(10.1, 12.2), range_i(0.0,120.2));
 minus 
-------
 -
(1 row)

select rangeii(4.5, 5.5) && range(5.5, 6.5);
 ?column? 
----------
 t
(1 row)

select range(1.0, 2.0) << range(3.0, 4.0);
 ?column? 
----------
 t
(1 row)

select range(1.0, 2.0) >> range(3.0, 4.0);
 ?column? 
----------
 f
(1 row)

select range(3.0, 70.0) &< range(6.6, 100.0);
 ?column? 
----------
 t
(1 row)

select range(1.1, 2.2) < range(1.0, 200.2);
 ?column? 
----------
 f
(1 row)

select range(1.1, 2.2) < range__(1.1, 1.2);
 ?column? 
----------
 t
(1 row)

select range(1.0, 2.0) + range(2.0, 3.0);
   ?column?   
--------------
 [ 1.0, 3.0 )
(1 row)

select range(1.0, 2.0) + range(1.5, 3.0);
   ?column?   
--------------
 [ 1.0, 3.0 )
(1 row)

select range(1.0, 2.0) + range(2.5, 3.0);
ERROR:  range union resulted in two ranges
select range(1.0, 2.0) * range(2.0, 3.0);
 ?column? 
----------
 -
(1 row)

select range(1.0, 2.0) * range(1.5, 3.0);
   ?column?   
--------------
 [ 1.5, 2.0 )
(1 row)

select range(1.0, 2.0) * range(2.5, 3.0);
 ?column? 
----------
 -
(1 row)

select * from numrange_test where nr < rangeii(-1000.0, -1000.0);
      nr       
---------------
 ( -INF, INF )
 ( -INF, 5 )
 -
(3 rows)

select * from numrange_test where nr < rangeii(0.0, 1.0);
      nr       
---------------
 ( -INF, INF )
 ( -INF, 5 )
 -
(3 rows)

select * from numrange_test where nr < rangeii(1000.0, 1001.0);
      nr       
---------------
 ( -INF, INF )
 [ 3, INF )
 ( -INF, 5 )
 [ 1.1, 2.2 )
 -
 [ 1.7, 1.7 ]
(6 rows)

select * from numrange_test where nr > rangeii(-1001.0, -1000.0);
      nr      
--------------
 [ 3, INF )
 [ 1.1, 2.2 )
 [ 1.7, 1.7 ]
(3 rows)

select * from numrange_test where nr > rangeii(0.0, 1.0);
      nr      
--------------
 [ 3, INF )
 [ 1.1, 2.2 )
 [ 1.7, 1.7 ]
(3 rows)

select * from numrange_test where nr > rangeii(1000.0, 1000.0);
 nr 
----
(0 rows)

create table numrange_test2(nr numrange);
create index numrange_test2_hash_idx on numrange_test2 (nr);
INSERT INTO numrange_test2 VALUES('[-INF, 5)');
INSERT INTO numrange_test2 VALUES(range(1.1, 2.2));
INSERT INTO numrange_test2 VALUES(range(1.1, 2.2));
INSERT INTO numrange_test2 VALUES(range__(1.1, 2.2));
INSERT INTO numrange_test2 VALUES('-');
select * from numrange_test2 where nr = '-'::numrange;
 nr 
----
 -
(1 row)

select * from numrange_test2 where nr = range(1.1, 2.2);
      nr      
--------------
 [ 1.1, 2.2 )
 [ 1.1, 2.2 )
(2 rows)

select * from numrange_test2 where nr = range(1.1, 2.3);
 nr 
----
(0 rows)

set enable_nestloop=t;
set enable_hashjoin=f;
set enable_mergejoin=f;
select * from numrange_test natural join numrange_test2 order by nr;
      nr      
--------------
 -
 ( -INF, 5 )
 [ 1.1, 2.2 )
 [ 1.1, 2.2 )
(4 rows)

set enable_nestloop=f;
set enable_hashjoin=t;
set enable_mergejoin=f;
select * from numrange_test natural join numrange_test2 order by nr;
      nr      
--------------
 -
 ( -INF, 5 )
 [ 1.1, 2.2 )
 [ 1.1, 2.2 )
(4 rows)

set enable_nestloop=f;
set enable_hashjoin=f;
set enable_mergejoin=t;
select * from numrange_test natural join numrange_test2 order by nr;
      nr      
--------------
 -
 ( -INF, 5 )
 [ 1.1, 2.2 )
 [ 1.1, 2.2 )
(4 rows)

set enable_nestloop to default;
set enable_hashjoin to default;
set enable_mergejoin to default;
SET enable_seqscan TO DEFAULT;
DROP TABLE numrange_test;
DROP TABLE numrange_test2;
-- test canonical form for intrange
select range__(1,10);
  range__  
-----------
 [ 2, 10 )
(1 row)

select rangei_(1,10);
  rangei_  
-----------
 [ 1, 10 )
(1 row)

select range_i(1,10);
  range_i  
-----------
 [ 2, 11 )
(1 row)

select rangeii(1,10);
  rangeii  
-----------
 [ 1, 11 )
(1 row)

-- test canonical form for daterange
select range__('2000-01-10'::date, '2000-01-20'::date);
          range__           
----------------------------
 [ 01-11-2000, 01-20-2000 )
(1 row)

select rangei_('2000-01-10'::date, '2000-01-20'::date);
          rangei_           
----------------------------
 [ 01-10-2000, 01-20-2000 )
(1 row)

select range_i('2000-01-10'::date, '2000-01-20'::date);
          range_i           
----------------------------
 [ 01-11-2000, 01-21-2000 )
(1 row)

select rangeii('2000-01-10'::date, '2000-01-20'::date);
          rangeii           
----------------------------
 [ 01-10-2000, 01-21-2000 )
(1 row)

-- test length()
select length(range(10.1,100.1));
 length 
--------
   90.0
(1 row)

select length('["2000-01-01 01:00:00", "2000-01-05 03:00:00")'::period);
      length      
------------------
 @ 4 days 2 hours
(1 row)

select length('["2000-01-01 01:00:00", "2000-01-01 03:00:00")'::periodtz);
  length   
-----------
 @ 2 hours
(1 row)

select length('["2000-01-01", "2000-01-05")'::daterange);
 length 
--------
      4
(1 row)

create table test_range_gist(ir intrange);
create index test_range_gist_idx on test_range_gist using gist (ir);
insert into test_range_gist select range(g, g+10) from generate_series(1,2000) g;
insert into test_range_gist select '-'::intrange from generate_series(1,500) g;
insert into test_range_gist select range(g, g+10000) from generate_series(1,1000) g;
insert into test_range_gist select '-'::intrange from generate_series(1,500) g;
insert into test_range_gist select range_linfi(g*10) from generate_series(1,100) g;
insert into test_range_gist select range_uinf_(g*10) from generate_series(1,100) g;
insert into test_range_gist select range(g, g+10) from generate_series(1,2000) g;
BEGIN;
SET LOCAL enable_seqscan    = t;
SET LOCAL enable_bitmapscan = f;
SET LOCAL enable_indexscan  = f;
select count(*) from test_range_gist where ir @> '-'::intrange;
 count 
-------
  6200
(1 row)

select count(*) from test_range_gist where ir = range(10,20);
 count 
-------
     2
(1 row)

select count(*) from test_range_gist where ir @> 10;
 count 
-------
   130
(1 row)

select count(*) from test_range_gist where ir @> range(10,20);
 count 
-------
   111
(1 row)

select count(*) from test_range_gist where ir && range(10,20);
 count 
-------
   158
(1 row)

select count(*) from test_range_gist where ir <@ range(10,50);
 count 
-------
  1062
(1 row)

select count(*) from (select * from test_range_gist where ir?) s where ir << range(100,500);
 count 
-------
   189
(1 row)

select count(*) from (select * from test_range_gist where ir?) s where ir >> range(100,500);
 count 
-------
  3554
(1 row)

select count(*) from (select * from test_range_gist where ir?) s where ir &< range(100,500);
 count 
-------
  1029
(1 row)

select count(*) from (select * from test_range_gist where ir?) s where ir &> range(100,500);
 count 
-------
  4794
(1 row)

select count(*) from (select * from test_range_gist where ir?) s where ir -|- range(100,500);
 count 
-------
     5
(1 row)

COMMIT;
BEGIN;
SET LOCAL enable_seqscan    = f;
SET LOCAL enable_bitmapscan = f;
SET LOCAL enable_indexscan  = t;
select count(*) from test_range_gist where ir @> '-'::intrange;
 count 
-------
  6200
(1 row)

select count(*) from test_range_gist where ir = range(10,20);
 count 
-------
     2
(1 row)

select count(*) from test_range_gist where ir @> 10;
 count 
-------
   130
(1 row)

select count(*) from test_range_gist where ir @> range(10,20);
 count 
-------
   111
(1 row)

select count(*) from test_range_gist where ir && range(10,20);
 count 
-------
   158
(1 row)

select count(*) from test_range_gist where ir <@ range(10,50);
 count 
-------
  1062
(1 row)

select count(*) from test_range_gist where ir << range(100,500);
 count 
-------
   189
(1 row)

select count(*) from test_range_gist where ir >> range(100,500);
 count 
-------
  3554
(1 row)

select count(*) from test_range_gist where ir &< range(100,500);
 count 
-------
  1029
(1 row)

select count(*) from test_range_gist where ir &> range(100,500);
 count 
-------
  4794
(1 row)

select count(*) from test_range_gist where ir -|- range(100,500);
 count 
-------
     5
(1 row)

COMMIT;
drop index test_range_gist_idx;
create index test_range_gist_idx on test_range_gist using gist (ir);
BEGIN;
SET LOCAL enable_seqscan    = f;
SET LOCAL enable_bitmapscan = f;
SET LOCAL enable_indexscan  = t;
select count(*) from test_range_gist where ir @> '-'::intrange;
 count 
-------
  6200
(1 row)

select count(*) from test_range_gist where ir = range(10,20);
 count 
-------
     2
(1 row)

select count(*) from test_range_gist where ir @> 10;
 count 
-------
   130
(1 row)

select count(*) from test_range_gist where ir @> range(10,20);
 count 
-------
   111
(1 row)

select count(*) from test_range_gist where ir && range(10,20);
 count 
-------
   158
(1 row)

select count(*) from test_range_gist where ir <@ range(10,50);
 count 
-------
  1062
(1 row)

select count(*) from test_range_gist where ir << range(100,500);
 count 
-------
   189
(1 row)

select count(*) from test_range_gist where ir >> range(100,500);
 count 
-------
  3554
(1 row)

select count(*) from test_range_gist where ir &< range(100,500);
 count 
-------
  1029
(1 row)

select count(*) from test_range_gist where ir &> range(100,500);
 count 
-------
  4794
(1 row)

select count(*) from test_range_gist where ir -|- range(100,500);
 count 
-------
     5
(1 row)

COMMIT;
drop table test_range_gist;
--
-- Btree_gist is not included by default, so to test exclusion
-- constraints with range types, use singleton int ranges for the "="
-- portion of the constraint.
--
create table test_range_excl(
  room intrange,
  speaker intrange,
  during period,
  exclude using gist (room with =, during with &&),
  exclude using gist (speaker with =, during with &&)
);
NOTICE:  CREATE TABLE / EXCLUDE will create implicit index "test_range_excl_room_during_excl" for table "test_range_excl"
NOTICE:  CREATE TABLE / EXCLUDE will create implicit index "test_range_excl_speaker_during_excl" for table "test_range_excl"
insert into test_range_excl
  values(range(123), range(1), '["2010-01-02 10:00", "2010-01-02 11:00")');
insert into test_range_excl
  values(range(123), range(2), '["2010-01-02 11:00", "2010-01-02 12:00")');
insert into test_range_excl
  values(range(123), range(3), '["2010-01-02 10:10", "2010-01-02 11:10")');
ERROR:  conflicting key value violates exclusion constraint "test_range_excl_room_during_excl"
DETAIL:  Key (room, during)=([ 123, 124 ), [ Sat Jan 02 10:10:00 2010, Sat Jan 02 11:10:00 2010 )) conflicts with existing key (room, during)=([ 123, 124 ), [ Sat Jan 02 10:00:00 2010, Sat Jan 02 11:00:00 2010 )).
insert into test_range_excl
  values(range(124), range(3), '["2010-01-02 10:10", "2010-01-02 11:10")');
insert into test_range_excl
  values(range(125), range(1), '["2010-01-02 10:10", "2010-01-02 11:10")');
ERROR:  conflicting key value violates exclusion constraint "test_range_excl_speaker_during_excl"
DETAIL:  Key (speaker, during)=([ 1, 2 ), [ Sat Jan 02 10:10:00 2010, Sat Jan 02 11:10:00 2010 )) conflicts with existing key (speaker, during)=([ 1, 2 ), [ Sat Jan 02 10:00:00 2010, Sat Jan 02 11:00:00 2010 )).
drop table test_range_excl;
